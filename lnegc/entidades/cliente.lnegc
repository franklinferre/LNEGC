# LNEGC v1.0
# Autor: LNEGC Team
# Data: 2024-04-07
# Descrição: Entidade Cliente

[ENTIDADE]
Nome: Cliente
Tipo: Domínio
Linguagem: Python
Versão: 1.0.0

[ATRIBUTOS]
- id: int (chave primária)
- nome: str (obrigatório)
- email: str (obrigatório)
- cpf: str (obrigatório)
- telefone: str (opcional)
- data_nascimento: date (opcional)
- ativo: bool (padrão: True)

[REGRAS]
- Nome deve ter entre 3 e 100 caracteres
- Email deve ser único e válido
- CPF deve ser válido
- Telefone deve seguir formato (XX) XXXXX-XXXX
- Data de nascimento deve ser anterior à data atual

[RELACIONAMENTOS]
- Um Cliente pode ter vários Pedidos (1:N)
- Um Cliente pertence a uma Cidade (N:1)

[IMPLEMENTAÇÃO]
```python
from datetime import date
from dataclasses import dataclass
from typing import Optional
from lnegc.componentes.validador_cpf import validar_cpf

@dataclass
class Cliente:
    id: int
    nome: str
    email: str
    cpf: str
    telefone: Optional[str] = None
    data_nascimento: Optional[date] = None
    ativo: bool = True

    def __post_init__(self):
        self.validar()

    def validar(self):
        if not 3 <= len(self.nome) <= 100:
            raise ValueError("Nome deve ter entre 3 e 100 caracteres")
        
        if not "@" in self.email:
            raise ValueError("Email inválido")
        
        if not validar_cpf(self.cpf):
            raise ValueError("CPF inválido")
        
        if self.telefone and not self.telefone.match(r"\(\d{2}\) \d{5}-\d{4}"):
            raise ValueError("Telefone deve seguir formato (XX) XXXXX-XXXX")
        
        if self.data_nascimento and self.data_nascimento > date.today():
            raise ValueError("Data de nascimento deve ser anterior à data atual")
``` 