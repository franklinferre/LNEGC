# Módulo de Registro de Ponto

## Metadados
- **Nome**: RegistroPonto
- **Tipo**: Componente
- **Descrição**: Componente para registro de ponto com captura de foto e geolocalização
- **Autor**: Franklin Ferreira
- **Versão**: 1.0.0

## Atributos
- **id**: UUID (chave primária, gerado automaticamente)
- **funcionarioId**: UUID (obrigatório, chave estrangeira para funcionarios)
- **dataHora**: DateTime (obrigatório)
- **latitude**: number (opcional, precisão 10,8)
- **longitude**: number (opcional, precisão 11,8)
- **ip**: string (opcional, máximo 45 caracteres)
- **dispositivo**: string (opcional, máximo 255 caracteres)
- **verificacaoFacial**: boolean (opcional, padrão false)
- **observacao**: text (opcional)
- **processado**: boolean (opcional, padrão false)
- **createdAt**: DateTime (opcional, padrão now())
- **empresaId**: UUID (opcional, chave estrangeira para empresas)
- **codigoValidacao**: string (opcional)
- **enderecoCompleto**: text (opcional)
- **browserInfo**: jsonb (opcional)
- **dispositivoInfo**: jsonb (opcional)
- **nsr**: string (opcional)
- **imagemUrl**: string (opcional)
- **tokenAcesso**: string (opcional)
- **canalRegistro**: enum (WHATSAPP, APP, WEB)
- **comprovanteGerado**: boolean (opcional, padrão false)
- **comprovanteUrl**: string (opcional)
- **comprovanteEnviado**: boolean (opcional, padrão false)
- **hashComprovante**: string (opcional)
- **assinaturaEletronica**: string (opcional)
- **confirmado**: boolean (opcional, padrão false)
- **dataConfirmacao**: DateTime (opcional)
- **dadosConfirmados**: jsonb (opcional)
- **formatoComprovante**: enum (DIGITAL, IMPRESSO)
- **certificadoDigital**: string (opcional)
- **dataExpiracaoCertificado**: DateTime (opcional)
- **disponibilizadoAutomaticamente**: boolean (opcional, padrão true)
- **assinaturaPdfSinger**: string (opcional)
- **statusAssinatura**: enum (PENDENTE, ASSINADO, ERRO)
- **qrcodeComprovante**: string (opcional)
- **dataExpiracaoQrcode**: DateTime (opcional)

## Validações de Negócio
- Data/hora não pode ser futura
- Funcionário deve existir na tabela funcionarios
- Empresa deve existir na tabela empresas (se informada)
- NSR é gerado automaticamente via trigger
- Verificação facial deve ser true para registros com imagem
- Token de acesso deve ser válido e não expirado
- Hash do comprovante deve ser gerado conforme padrão SHA-256
- Registro só pode ser processado após confirmação do funcionário
- Comprovante digital deve ser assinado com certificado digital válido via pdf-singer
- Comprovante digital deve ser disponibilizado automaticamente após a marcação
- Comprovante impresso deve seguir padrões de legibilidade (cor contrastante, caracteres de no máximo 8 por cm, altura mínima de 3 mm)
- QR code do comprovante deve ser gerado automaticamente após a geração do comprovante
- QR code deve expirar após 48 horas da geração do comprovante

## Regras de Fluxo
- **Registro via WhatsApp**:
  - Funcionário solicita registro de ponto via WhatsApp
  - Sistema reconhece a solicitação e gera link com token
  - Funcionário acessa o link que abre o sistema de registro
  - Sistema captura foto, localização e registra o ponto
  - Sistema exibe tela de confirmação com todos os dados:
    - Foto capturada
    - Data e hora atual
    - Localização (endereço completo)
    - Dados do funcionário
    - Dados do dispositivo
    - Informações adicionais (IP, navegador, etc.)
  - Funcionário confirma os dados ou solicita nova captura
  - Após confirmação, sistema gera comprovante conforme Portaria 671
  - Sistema disponibiliza o comprovante automaticamente
  - Sistema pergunta se deseja receber via WhatsApp ou baixar PDF

- **Registro via App/Web**:
  - Funcionário acessa o sistema e informa CPF e matrícula
  - Sistema valida as credenciais
  - Sistema captura foto, localização para o registro do ponto
  - Sistema exibe tela de confirmação com todos os dados:
    - Foto capturada
    - Data e hora atual
    - Localização (endereço completo)
    - Dados do funcionário
    - Dados do dispositivo
    - Informações adicionais (IP, navegador, etc.)
  - Funcionário confirma os dados ou solicita nova captura
  - Após confirmação, sistema registra o ponto e gera comprovante conforme Portaria 671
  - Sistema disponibiliza o comprovante automaticamente
  - Sistema pergunta se deseja receber via WhatsApp ou baixar PDF

- **Processamento**:
  - Processamento ocorre em fila RabbitMQ para garantir ordem e consistência
  - API de endereço (Nominatim) é consultada para obter endereço completo
  - NSR é processado sequencialmente por CNPJ (incremento +1)
  - Reconhecimento facial é processado
  - Dupla autenticação do aparelho é verificada
  - Dispositivo que gerou a batida é registrado
  - Logs são gerados para todas as tentativas e resultados
  - Registros são marcados como processados após conclusão

- **Tratamento de Erros**:
  - Se reconhecimento facial falhar, sistema solicita nova foto
  - Se localização estiver fora do raio permitido, registro é marcado para revisão
  - Se IP for suspeito, registro é marcado para revisão
  - Se token expirar, novo token é gerado
  - Se comprovante não puder ser gerado, sistema notifica administrador
  - Se funcionário não confirmar os dados, registro fica pendente de confirmação pelo funcionário
  - Se a assinatura eletrônica falhar, sistema tenta novamente e notifica administrador

- **Verificação de Ponto**:
  - Funcionário acessa a página de verificação de ponto
  - Sistema oferece duas opções de busca:
    - Escaneamento de QR code do comprovante
    - Inserção manual do código NSR
  - Sistema valida o QR code ou NSR e busca o registro correspondente
  - Sistema exibe os dados completos do registro:
    - Foto do funcionário no momento do registro
    - Data e hora do registro
    - Localização (endereço completo)
    - Dados do funcionário
    - Dados do dispositivo
    - Informações adicionais (IP, navegador, etc.)
    - NSR do registro
    - Hash do comprovante
    - Status da assinatura eletrônica
  - Sistema oferece opções para:
    - Visualizar o comprovante original
    - Reimprimir o comprovante
    - Baixar o comprovante em PDF
    - Compartilhar o comprovante via WhatsApp
  - Sistema registra todas as visualizações e reimpressões para auditoria
  - Sistema verifica a validade do QR code (48 horas) e notifica se expirado

## Relacionamentos
- **funcionario**: Funcionario (muitos para um)
- **empresa**: Empresa (muitos para um, opcional)
- **dispositivo**: Dispositivo (muitos para um, opcional)

## Métodos de Domínio
- **registrarPonto()**: Registra um novo ponto
- **processarRegistro()**: Marca o registro como processado
- **validarFacial()**: Atualiza o status da verificação facial
- **atualizarImagem()**: Atualiza a URL da imagem
- **gerarCodigoValidacao()**: Gera código de validação
- **verificarRegistroAnterior()**: Verifica se existe registro anterior no mesmo dia
- **verificarHorarioPermitido()**: Verifica se o horário está dentro do permitido
- **verificarLocalizacaoPermitida()**: Verifica se a localização está dentro do raio permitido
- **marcarParaRevisao()**: Marca o registro para revisão manual
- **gerarTokenAcesso()**: Gera token de acesso para link
- **gerarComprovante()**: Gera comprovante conforme Portaria 671
- **enviarComprovante()**: Envia comprovante via WhatsApp ou disponibiliza para download
- **gerarHashComprovante()**: Gera hash SHA-256 do comprovante
- **gerarAssinaturaEletronica()**: Gera assinatura eletrônica para o comprovante via pdf-singer
- **processarNSR()**: Processa o NSR sequencialmente por CNPJ
- **processarEndereco()**: Processa o endereço completo via API Nominatim
- **processarDispositivo()**: Processa informações do dispositivo
- **registrarLog()**: Registra logs de processamento
- **exibirDadosConfirmacao()**: Exibe todos os dados para confirmação do funcionário
- **confirmarRegistro()**: Marca o registro como confirmado pelo funcionário
- **capturarDadosDispositivo()**: Captura informações do dispositivo e navegador
- **obterEnderecoLocalizacao()**: Obtém endereço completo a partir da latitude/longitude via Nominatim
- **disponibilizarComprovante()**: Disponibiliza o comprovante automaticamente após a marcação
- **verificarCertificadoDigital()**: Verifica a validade do certificado digital
- **gerarComprovantePDF()**: Gera o comprovante em formato PDF
- **assinarComprovanteDigital()**: Assina o comprovante com certificado digital via pdf-singer
- **imprimirComprovante()**: Imprime o comprovante com padrões de legibilidade
- **obterComprovantes48Horas()**: Obtém comprovantes das últimas 48 horas
- **obterIPPublico()**: Obtém o IP público do funcionário via ipify
- **verificarStatusAssinatura()**: Verifica o status da assinatura eletrônica
- **gerarQRCodeComprovante()**: Gera QR code para o comprovante
- **verificarQRCode()**: Verifica a validade do QR code
- **buscarRegistroPorNSR()**: Busca registro pelo código NSR
- **buscarRegistroPorQRCode()**: Busca registro pelo QR code
- **registrarVisualizacao()**: Registra a visualização do comprovante
- **registrarReimpressao()**: Registra a reimpressão do comprovante
- **compartilharComprovante()**: Compartilha o comprovante via WhatsApp

## Índices do Banco de Dados
- **idx_registros_bruto_funcionario**: Índice para busca por funcionário
- **idx_registros_bruto_data_hora**: Índice para busca por data/hora
- **idx_registros_bruto_processado**: Índice para busca por status de processamento
- **idx_registros_ponto_bruto_nsr**: Índice para busca por NSR
- **idx_registros_ponto_bruto_empresa_id**: Índice para busca por empresa
- **idx_registros_ponto_bruto_codigo_validacao**: Índice para busca por código de validação
- **idx_registros_ponto_bruto_token**: Índice para busca por token de acesso
- **idx_registros_ponto_bruto_canal**: Índice para busca por canal de registro
- **idx_registros_ponto_bruto_confirmado**: Índice para busca por status de confirmação
- **idx_registros_ponto_bruto_data_hora_funcionario**: Índice composto para busca de registros por data/hora e funcionário
- **idx_registros_ponto_bruto_status_assinatura**: Índice para busca por status da assinatura
- **idx_registros_ponto_bruto_qrcode**: Índice para busca por QR code do comprovante

## Regras de Permissão
- CREATE: FUNCIONARIO
- READ: FUNCIONARIO (próprios registros), ADMIN, RH, GESTOR
- UPDATE: ADMIN, RH
- DELETE: NENHUM

## Requisitos Técnicos
1. Use TypeScript com decorators para validação
2. Implemente validações usando Zod
3. Use classes de domínio com encapsulamento
4. Implemente todos os métodos de domínio
5. Adicione validações de negócio
6. Use tipos fortes e interfaces
7. Implemente tratamento de erros
8. Adicione documentação JSDoc
9. Siga os princípios SOLID
10. Implemente testes unitários

## Elementos do Comprovante REP-P
- **Cabeçalho**: Título "Comprovante de Registro de Ponto do Trabalhador"
- **NSR**: Número Sequencial de Registro (identificador único)
- **Identificação do Empregador**: Nome, CNPJ/CPF, CEI/CAEPF/CNO
- **Local da Prestação do Serviço**: Endereço do estabelecimento
- **Identificação do Trabalhador**: Nome e CPF
- **Data e Horário da Marcação**: Registro preciso do momento
- **Informações do Equipamento**: Número de registro no INPI
- **Endereço + Localização**: Local de Marcacao de Ponto de acordo com o GPS
- **Código Hash (SHA-256)**: Valor criptográfico para integridade 
- **Assinatura Eletrônica**: Para comprovantes em pdf com ICP-BRASIL 

## Formato do Comprovante (Art. 80)
- **Opções de Formato**:
  - Impresso em papel
  - Arquivo eletrônico (digital) em formato PDF

- **Requisitos para Comprovante Digital (Parágrafo único do art. 80)**:
  - Deve ser em formato PDF
  - Deve ser assinado eletronicamente nos termos dos arts. 87 e 88 (com certificado digital válido)
  - O trabalhador deve ter acesso imediato após cada marcação, sem necessidade de solicitação ou autorização prévia
  - O empregador deve permitir que o empregado extraia (baixe) os comprovantes referentes às marcações realizadas nos últimos 48 horas, no mínimo
  - Se o sistema eletrônico cumprir essas condições, não é obrigatório entregar comprovante físico no momento da marcação

- **Requisitos para Comprovante Impresso**:
  - Impressão em cor contrastante
  - Caracteres de no máximo 8 por cm
  - Altura mínima de 3 mm
  - Mesma regra aplicada a relógios de ponto REP-C

## Integrações com APIs Externas

### 1. pdf-singer (Assinatura Eletrônica)
- **Descrição**: API para assinatura eletrônica de documentos PDF com certificado digital ICP-Brasil
- **Status**: Em desenvolvimento
- **Endpoint**: A ser definido
- **Método**: POST
- **Parâmetros**:
  - `pdfBase64`: Documento PDF em formato base64
  - `certificadoDigital`: Certificado digital ICP-Brasil
  - `senhaCertificado`: Senha do certificado
- **Resposta**:
  - `pdfAssinadoBase64`: Documento PDF assinado em formato base64
  - `status`: Status da assinatura (SUCESSO, ERRO)
  - `mensagem`: Mensagem de erro (se aplicável)
- **Tratamento de Erros**:
  - Tentar novamente em caso de falha temporária
  - Notificar administrador em caso de falha persistente
  - Registrar logs detalhados do processo de assinatura

### 2. ipify (Obtenção de IP Público)
- **Descrição**: API para obtenção do IP público do funcionário
- **URL**: https://api.ipify.org
- **Método**: GET
- **Parâmetros**:
  - `format`: Formato da resposta (json, jsonp, text)
- **Resposta**:
  - `ip`: Endereço IP público do funcionário
- **Exemplo de Uso**:
  ```javascript
  // Exemplo de requisição
  fetch('https://api.ipify.org?format=json')
    .then(response => response.json())
    .then(data => {
      console.log('IP público:', data.ip);
    });
  ```
- **Tratamento de Erros**:
  - Implementar timeout para a requisição
  - Registrar IP como "não disponível" em caso de falha

### 3. Nominatim (Geocodificação Reversa)
- **Descrição**: API para obtenção de endereço completo a partir de latitude e longitude
- **URL**: https://nominatim.org/release-docs/develop/api/Reverse/
- **Método**: GET
- **Parâmetros**:
  - `lat`: Latitude
  - `lon`: Longitude
  - `format`: Formato da resposta (json, xml)
  - `zoom`: Nível de detalhe (0-18)
  - `addressdetails`: Incluir detalhes do endereço (1)
- **Resposta**:
  - `display_name`: Endereço completo formatado
  - `address`: Objeto com componentes do endereço
  - `lat`: Latitude
  - `lon`: Longitude
- **Exemplo de Uso**:
  ```javascript
  // Exemplo de requisição
  fetch('https://nominatim.openstreetmap.org/reverse?format=json&lat=-23.5505&lon=-46.6333&zoom=18&addressdetails=1')
    .then(response => response.json())
    .then(data => {
      console.log('Endereço completo:', data.display_name);
      console.log('Componentes do endereço:', data.address);
    });
  ```
- **Tratamento de Erros**:
  - Implementar timeout para a requisição
  - Registrar endereço como "não disponível" em caso de falha
  - Implementar cache para reduzir requisições repetidas 

## Página de Verificação de Ponto

### Descrição
Página dedicada para verificação, visualização e reimpressão de comprovantes de ponto, permitindo que funcionários acessem seus registros através de QR code ou código NSR.

### Funcionalidades
- **Busca por QR Code**:
  - Scanner integrado para leitura de QR code do comprovante
  - Validação automática do QR code
  - Exibição de mensagem de erro para QR codes inválidos ou expirados

- **Busca por NSR**:
  - Campo para inserção manual do código NSR
  - Validação do formato do NSR
  - Exibição de mensagem de erro para NSR inválido ou não encontrado

- **Visualização de Dados**:
  - Exibição completa dos dados do registro:
    - Foto do funcionário no momento do registro
    - Data e hora do registro
    - Localização (endereço completo)
    - Dados do funcionário (nome, CPF, matrícula)
    - Dados do dispositivo (modelo, sistema operacional)
    - Informações adicionais (IP, navegador)
    - NSR do registro
    - Hash do comprovante
    - Status da assinatura eletrônica

- **Opções de Comprovante**:
  - Visualizar o comprovante original
  - Reimprimir o comprovante
  - Baixar o comprovante em PDF
  - Compartilhar o comprovante via WhatsApp

- **Auditoria**:
  - Registro de todas as visualizações e reimpressões
  - Histórico de acessos ao comprovante
  - Identificação do dispositivo e IP de acesso

### Fluxo de Uso
1. Funcionário acessa a página de verificação de ponto
2. Escolhe entre escanear QR code ou inserir NSR manualmente
3. Sistema valida e busca o registro correspondente
4. Sistema exibe os dados completos do registro
5. Funcionário pode visualizar, reimprimir, baixar ou compartilhar o comprovante
6. Sistema registra a ação para auditoria

### Requisitos Técnicos
- Implementação de scanner de QR code no navegador
- Validação de QR code e NSR no backend
- Geração de PDF do comprovante sob demanda
- Integração com API de compartilhamento via WhatsApp
- Sistema de logs para auditoria de acessos

## Estrutura de Banco de Dados

> **IMPORTANTE**: As tabelas e estruturas de banco de dados apresentadas abaixo representam apenas as tabelas mínimas necessárias para o funcionamento do módulo de registro de ponto. Elas não refletem a estrutura completa do banco de dados existente e não são estáticas. A implementação real deve se adaptar à estrutura de banco de dados existente e às necessidades específicas do projeto.

### 1. Tabela: registros_ponto_bruto
```sql
CREATE TABLE public.registros_ponto_bruto (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    funcionario_id UUID NOT NULL REFERENCES public.funcionarios(id),
    data_hora TIMESTAMP WITH TIME ZONE NOT NULL,
    latitude NUMERIC(10,8),
    longitude NUMERIC(11,8),
    ip VARCHAR(45),
    dispositivo VARCHAR(255),
    verificacao_facial BOOLEAN DEFAULT FALSE,
    observacao TEXT,
    processado BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    empresa_id UUID REFERENCES public.empresas(id),
    codigo_validacao VARCHAR(255),
    endereco_completo TEXT,
    browser_info JSONB,
    dispositivo_info JSONB,
    nsr VARCHAR(255),
    imagem_url TEXT,
    token_acesso VARCHAR(255),
    canal_registro VARCHAR(20) CHECK (canal_registro IN ('WHATSAPP', 'APP', 'WEB')),
    comprovante_gerado BOOLEAN DEFAULT FALSE,
    comprovante_url TEXT,
    comprovante_enviado BOOLEAN DEFAULT FALSE,
    hash_comprovante VARCHAR(64),
    assinatura_eletronica TEXT,
    confirmado BOOLEAN DEFAULT FALSE,
    data_confirmacao TIMESTAMP WITH TIME ZONE,
    dados_confirmados JSONB,
    formato_comprovante VARCHAR(20) CHECK (formato_comprovante IN ('DIGITAL', 'IMPRESSO')),
    certificado_digital TEXT,
    data_expiracao_certificado TIMESTAMP WITH TIME ZONE,
    disponibilizado_automaticamente BOOLEAN DEFAULT TRUE,
    assinatura_pdf_singer TEXT,
    status_assinatura VARCHAR(20) CHECK (status_assinatura IN ('PENDENTE', 'ASSINADO', 'ERRO')),
    qrcode_comprovante TEXT,
    data_expiracao_qrcode TIMESTAMP WITH TIME ZONE,
    CONSTRAINT fk_funcionario FOREIGN KEY (funcionario_id) REFERENCES public.funcionarios(id),
    CONSTRAINT fk_empresa FOREIGN KEY (empresa_id) REFERENCES public.empresas(id)
);

-- Índices
CREATE INDEX idx_registros_bruto_funcionario ON public.registros_ponto_bruto(funcionario_id);
CREATE INDEX idx_registros_bruto_data_hora ON public.registros_ponto_bruto(data_hora);
CREATE INDEX idx_registros_bruto_processado ON public.registros_ponto_bruto(processado);
CREATE INDEX idx_registros_ponto_bruto_nsr ON public.registros_ponto_bruto(nsr);
CREATE INDEX idx_registros_ponto_bruto_empresa_id ON public.registros_ponto_bruto(empresa_id);
CREATE INDEX idx_registros_ponto_bruto_codigo_validacao ON public.registros_ponto_bruto(codigo_validacao);
CREATE INDEX idx_registros_ponto_bruto_token ON public.registros_ponto_bruto(token_acesso);
CREATE INDEX idx_registros_ponto_bruto_canal ON public.registros_ponto_bruto(canal_registro);
CREATE INDEX idx_registros_ponto_bruto_confirmado ON public.registros_ponto_bruto(confirmado);
CREATE INDEX idx_registros_ponto_bruto_data_hora_funcionario ON public.registros_ponto_bruto(data_hora, funcionario_id);
CREATE INDEX idx_registros_ponto_bruto_status_assinatura ON public.registros_ponto_bruto(status_assinatura);
CREATE INDEX idx_registros_ponto_bruto_qrcode ON public.registros_ponto_bruto(qrcode_comprovante);

-- Trigger para geração automática de NSR
CREATE OR REPLACE FUNCTION public.gerar_nsr()
RETURNS TRIGGER AS $$
DECLARE
    ultimo_nsr INTEGER;
    novo_nsr INTEGER;
BEGIN
    -- Obter o último NSR para a empresa
    SELECT COALESCE(MAX(CAST(SUBSTRING(nsr, 1, POSITION('-' IN nsr) - 1) AS INTEGER)), 0)
    INTO ultimo_nsr
    FROM public.registros_ponto_bruto
    WHERE empresa_id = NEW.empresa_id;
    
    -- Incrementar o NSR
    novo_nsr := ultimo_nsr + 1;
    
    -- Formatar o NSR (formato: NNNNNNNNNN-AAAA-MM-DD-HHMMSS)
    NEW.nsr := LPAD(novo_nsr::TEXT, 10, '0') || '-' || 
                TO_CHAR(NEW.data_hora, 'YYYY-MM-DD-HH24MISS');
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_gerar_nsr
BEFORE INSERT ON public.registros_ponto_bruto
FOR EACH ROW
EXECUTE FUNCTION public.gerar_nsr();
```

### 2. Tabela: funcionarios
```sql
CREATE TABLE public.funcionarios (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    nome VARCHAR(255) NOT NULL,
    cpf VARCHAR(14) NOT NULL UNIQUE,
    matricula VARCHAR(50) NOT NULL UNIQUE,
    empresa_id UUID NOT NULL REFERENCES public.empresas(id),
    cargo VARCHAR(100),
    departamento VARCHAR(100),
    data_admissao DATE NOT NULL,
    data_demissao DATE,
    status VARCHAR(20) DEFAULT 'ATIVO' CHECK (status IN ('ATIVO', 'INATIVO', 'FERIAS', 'AFASTADO')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT fk_empresa FOREIGN KEY (empresa_id) REFERENCES public.empresas(id)
);

-- Índices
CREATE INDEX idx_funcionarios_cpf ON public.funcionarios(cpf);
CREATE INDEX idx_funcionarios_matricula ON public.funcionarios(matricula);
CREATE INDEX idx_funcionarios_empresa ON public.funcionarios(empresa_id);
CREATE INDEX idx_funcionarios_status ON public.funcionarios(status);
```

### 3. Tabela: empresas
```sql
CREATE TABLE public.empresas (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    razao_social VARCHAR(255) NOT NULL,
    nome_fantasia VARCHAR(255),
    cnpj VARCHAR(18) NOT NULL UNIQUE,
    cei VARCHAR(20),
    caepf VARCHAR(20),
    cno VARCHAR(20),
    endereco TEXT,
    telefone VARCHAR(20),
    email VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Índices
CREATE INDEX idx_empresas_cnpj ON public.empresas(cnpj);
```

### 4. Tabela: dispositivos
```sql
CREATE TABLE public.dispositivos (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    funcionario_id UUID NOT NULL REFERENCES public.funcionarios(id),
    identificador VARCHAR(255) NOT NULL,
    tipo VARCHAR(50) NOT NULL,
    modelo VARCHAR(100),
    sistema_operacional VARCHAR(100),
    versao_sistema VARCHAR(50),
    ultimo_acesso TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT fk_funcionario FOREIGN KEY (funcionario_id) REFERENCES public.funcionarios(id)
);

-- Índices
CREATE INDEX idx_dispositivos_funcionario ON public.dispositivos(funcionario_id);
CREATE INDEX idx_dispositivos_identificador ON public.dispositivos(identificador);
```

### 5. Tabela: tokens_acesso
```sql
CREATE TABLE public.tokens_acesso (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    funcionario_id UUID NOT NULL REFERENCES public.funcionarios(id),
    token VARCHAR(255) NOT NULL UNIQUE,
    data_expiracao TIMESTAMP WITH TIME ZONE NOT NULL,
    utilizado BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT fk_funcionario FOREIGN KEY (funcionario_id) REFERENCES public.funcionarios(id)
);

-- Índices
CREATE INDEX idx_tokens_acesso_funcionario ON public.tokens_acesso(funcionario_id);
CREATE INDEX idx_tokens_acesso_token ON public.tokens_acesso(token);
CREATE INDEX idx_tokens_acesso_expiracao ON public.tokens_acesso(data_expiracao);
```

### 6. Tabela: logs_registro_ponto
```sql
CREATE TABLE public.logs_registro_ponto (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    registro_id UUID NOT NULL REFERENCES public.registros_ponto_bruto(id),
    tipo_log VARCHAR(50) NOT NULL,
    mensagem TEXT NOT NULL,
    dados JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT fk_registro FOREIGN KEY (registro_id) REFERENCES public.registros_ponto_bruto(id)
);

-- Índices
CREATE INDEX idx_logs_registro_ponto_registro ON public.logs_registro_ponto(registro_id);
CREATE INDEX idx_logs_registro_ponto_tipo ON public.logs_registro_ponto(tipo_log);
CREATE INDEX idx_logs_registro_ponto_data ON public.logs_registro_ponto(created_at);
```

### 7. Tabela: certificados_digitais
```sql
CREATE TABLE public.certificados_digitais (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    empresa_id UUID NOT NULL REFERENCES public.empresas(id),
    certificado TEXT NOT NULL,
    senha VARCHAR(255) NOT NULL,
    data_expiracao TIMESTAMP WITH TIME ZONE NOT NULL,
    ativo BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT fk_empresa FOREIGN KEY (empresa_id) REFERENCES public.empresas(id)
);

-- Índices
CREATE INDEX idx_certificados_digitais_empresa ON public.certificados_digitais(empresa_id);
CREATE INDEX idx_certificados_digitais_expiracao ON public.certificados_digitais(data_expiracao);
CREATE INDEX idx_certificados_digitais_ativo ON public.certificados_digitais(ativo);
```

### 8. Tabela: visualizacoes_comprovante
```sql
CREATE TABLE public.visualizacoes_comprovante (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    registro_id UUID NOT NULL REFERENCES public.registros_ponto_bruto(id),
    funcionario_id UUID NOT NULL REFERENCES public.funcionarios(id),
    tipo_acao VARCHAR(50) NOT NULL CHECK (tipo_acao IN ('VISUALIZACAO', 'REIMPRESSAO', 'DOWNLOAD', 'COMPARTILHAMENTO')),
    ip VARCHAR(45),
    dispositivo VARCHAR(255),
    browser_info JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT fk_registro FOREIGN KEY (registro_id) REFERENCES public.registros_ponto_bruto(id),
    CONSTRAINT fk_funcionario FOREIGN KEY (funcionario_id) REFERENCES public.funcionarios(id)
);

-- Índices
CREATE INDEX idx_visualizacoes_comprovante_registro ON public.visualizacoes_comprovante(registro_id);
CREATE INDEX idx_visualizacoes_comprovante_funcionario ON public.visualizacoes_comprovante(funcionario_id);
CREATE INDEX idx_visualizacoes_comprovante_tipo_acao ON public.visualizacoes_comprovante(tipo_acao);
CREATE INDEX idx_visualizacoes_comprovante_data ON public.visualizacoes_comprovante(created_at);
``` 